################################################################################
# Copyright (c) 2020, Devin Nakamura
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# SPDX-License-Identifier: BSD-2-Clause
################################################################################

# Basic sanity checks
{ 1 } [ 1 ] check
{ } [ ] check
{ T } [ T ] check
{ F } [ F ] check

# Comparison operators
{ 1 1 < } [ F ] check
{ 3 1 < } [ F ] check
{ 1 3 < } [ T ] check

{ 1 1 > } [ F ] check
{ 1 2 > } [ F ] check
{ 2 1 > } [ T ] check

{ 1 1 =? } [ T ] check
{ 1 2 =? } [ F ] check
{ "foo" 1 =? } [ F ] check
{ "foo" "foo" =? } [ T ] check
{ "foo" "bar" =? } [ F ] check
{ "foo" "foobar" =? } [ F ] check

# Math operators
{ 7 1 + } [ 8 ] check
{ 2 5 9 + } [ 2 14 ] check

{ 18 7 - } [ 11 ] check

{ 7 3 * } [ 21 ] check

{ 1 2 / } [ 0 ] check
{ 8 2 / } [ 4 ] check
{ 9 2 / } [ 4 ] check

{ 8 2 % } [ 0 ] check
{ 9 2 % } [ 1 ] check

{ 3 2 & } [ 2 ] check
{ 2 1 & } [ 0 ] check

{ 1 1 | } [ 1 ] check
{ 0 7 | } [ 7 ] check
{ 1 2 | } [ 3 ] check

# Stack manipulation
{ 1 dup } [ 1 1 ] check
{ 1 2 dup } [ 1 2 2 ] check

{ 1 2 swap } [ 2 1 ] check
{ 1 2 3 swap } [ 1 3 2 ] check

{ 1 drop } [ ] check
{ 1 2 drop } [ 1 ] check

{ 1 2 over } [ 1 2 1 ] check
{ 1 2 3 over } [ 1 2 3 2 ] check

{ 1 2 3 rot } [ 3 1 2 ] check
{ 1 2 3 4 rot } [ 1 4 2 3 ] check

{ 1 5 { 2 + } dip } [ 3 5 ] check

{ 1 2 3 pick } [ 1 2 3 1 ] check

# Control flow

{ 1 { dup 5 < } { dup 1 + } while } [ 1 2 3 4 5 ] check

{ T F 1 ? } [ F ] check
{ F 1 T ? } [ T ] check
#{ 1 T F ? } [ T ] check

# bool operator
{ F >bool } [ F ] check
{ T >bool } [ T ] check
{ 123 >bool } [ T ] check
{ "hello" >bool } [ T ] check


# Not categorized

{ 1 2 "+" lookup call } [ 3 ] check
{ "foo" hash "foo" hash  =? } [ T ] check
{ "foo" hash "bar" hash =? } [ F ] check

{ 1 hash 1 hash =? } [ T ] check
{ 1 hash 2 hash =? } [ F ] check


{ "+" lookup parse-word? } [ F ] check
{ "{" lookup parse-word? } [ T ] check

{ [ 1 2 3 ] array? } [ T ] check
{ 1 2 array? } [ 1 F ] check
{ "+" lookup array? } [ F ] check

{ 1 string? } [ F ] check
{ [ 1 2 3 ] string? } [ F ] check
{ "foo" string? } [ T ] check

{ [ 1 2 + ] array>quote array? } [ F ] check
{ 5 [ 4 - ] array>quote call } [ 1 ] check

{ [ 1 2 3 4 ] length } [ 4 ] check

# Check arrays
# Check that we can parse nested values.
# note that we just discard the result since we don't have proper value comparison
{ [ 123 ] drop } [ ] check
{ [ [ 1 ] [ 2 ] { 3 } 4 ] drop } [ ] check
{ { { 1 } [ 2 ] 3 [ [ 4 ] ] } drop } [ ] check
